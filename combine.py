import pandas as pd
import numpy as np
import progressbar as pb
import time
from math import sin, cos, sqrt, atan2, radians

def read(filename):
    df = pd.read_csv(filename)
    df['Modes'] = 'null'
    num = list(df.index)
    for each in num:
        a = df.loc[each, 'Pedestrian']
        if a == 1:
            df.loc[each, 'Modes'] = 'Single Ped'
        b = df.loc[each, 'Bike']
        if b == 1:
            df.loc[each, 'Modes'] = 'Single Cyl'
        c = df.loc[each, 'Motorcycle']
        if c == 1:
            df.loc[each, 'Modes'] = 'Single Mot'
        d = df.loc[each, 'Veh']
        if d == 1:
            df.loc[each, 'Modes'] = 'Single Veh'

    df.to_csv(filename.split('.')[0] + 'edited.csv')

def combine():
    df1 = pd.read_csv('/Users/Amelia/Desktop/CDedited.csv')
    df2 = pd.read_csv('/Users/Amelia/Desktop/injury.csv')
    frames = [df1, df2]
    result = pd.concat(frames)
    #10560
    result = result.dropna(subset=['Latitude'])
    result.sort_values(by=['Collision Date'])
    print(result)
    result.to_csv('/Users/Amelia/Desktop/final.csv')

def edit(filename):
    Cyl_Cyl = filename.loc[filename['Modes'] == 'Cyl-Cyl']
    Cyl_Ped = filename.loc[filename['Modes'] == 'Cyl-Ped']
    Cyl_Unk = filename.loc[filename['Modes'] == 'Cyl-Unk']
    Cyl_Mot = filename.loc[filename['Modes'] == 'Mot-Cyl']
    Cyl_sin = filename.loc[filename['Modes'] == 'Single Cyl']
    frames = [Cyl_Cyl, Cyl_Ped,Cyl_Unk,Cyl_Mot,Cyl_sin]
    result = pd.concat(frames)
    result.to_csv('/Users/Amelia/Desktop/final_cycle_only.csv')

def sum(filename):
    Cyl_Cyl = filename.loc[filename['Modes'] == 'Cyl-Cyl']
    Cyl_Ped = filename.loc[filename['Modes'] == 'Cyl-Ped']
    Cyl_Unk = filename.loc[filename['Modes'] == 'Cyl-Unk']
    Cyl_Mot = filename.loc[filename['Modes'] == 'Mot-Cyl']
    Cyl_sin = filename.loc[filename['Modes'] == 'Single Cyl']
    frames = [Cyl_Cyl, Cyl_Ped,Cyl_Unk,Cyl_Mot,Cyl_sin]
    result = pd.concat(frames)
    result.to_csv('/Users/Amelia/Desktop/final_cycle_only.csv')

def cat_to_dummy(input_data, all_cat, missingValue):
    ncol = input_data.columns.size
    nrow = input_data.index.size
    if all_cat == 'auto':
        all_cat = []
        print('all_cat is generated by data')
        for m in range(ncol):
            all_cat = list(set(all_cat).union(set(input_data[input_data.columns[m]])))
    all_cat = list(set(all_cat))
    print(all_cat)
    if missingValue in all_cat:
        all_cat.remove(missingValue)
    all_cat = set(all_cat)
    df_target = pd.DataFrame(
        (np.zeros(len(input_data) * len(all_cat), dtype=np.int).reshape(len(input_data), len(all_cat))),
        index=input_data.index, columns=all_cat)
    print(df_target)

    size = len(df_target)
    bar = pb.ProgressBar(max_value=size)
    i = 0

    for j in range(len(df_target)):
        #time.sleep(0.1)
        i=i+1
        bar.update(i)

        col_cat = input_data.loc[j,]
        col_cat = set(col_cat)
        target_col_cat = list(all_cat & col_cat)

        df_target.loc[j, target_col_cat] = '1'
    return df_target

def map_dis(mobike, accidents):
    threshold = 1500

    num_acc = list(accidents.index)
    num_mobike = list(mobike.index)

    for each_acc in num_acc:
        lat_acc = accidents.loc[each_acc, 'Latitude']
        long_acc = accidents.loc[each_acc, 'Longitude']
        dist = 0
        for each_mo in num_mobike:
            lat_mo = mobike.loc[each_mo, 'Latitude']
            long_mo = mobike.loc[each_mo, 'Longitude']
            # create new field MoIntersectionLat,MoIntersectionLong,MoIntersection
            val = cal_dist(lat_acc, long_acc, lat_mo, long_mo)
            print(val)

            if val < threshold:
                print("Found .. < threshold")
                if accidents.loc[each_acc, 'MoIntersectionLat'] == 0:
                    accidents.loc[each_acc, 'MoIntersectionLat']= lat_mo
                    accidents.loc[each_acc, 'MoIntersectionLong']= long_mo
                    accidents.loc[each_acc, 'MoIntersection'] = mobike.loc[each_mo, 'Row Labels']
                    print(accidents)
                    dist = val
                else:
                    if val < dist:
                        accidents.loc[each_acc, 'MoIntersectionLat'] = lat_mo
                        accidents.loc[each_acc, 'MoIntersectionLong'] = long_mo
                        accidents.loc[each_acc, 'MoIntersection'] = mobike.loc[each_mo, 'Row Labels']
        # print("shortest: ")
        # print(val)

    accidents.to_csv('/Users/Amelia/Desktop/mapped.csv')







def cal_dist(lat_acc, long_acc, lat_mo, long_mo):
    R = 6373.0
    lat_acc = radians(lat_acc)
    long_acc = radians(long_acc)
    lat_mo = radians(lat_mo)
    long_mo = radians(long_mo)

    dlon = long_mo - long_acc
    dlat = lat_mo - lat_acc

    a = sin(dlat / 2) ** 2 + cos(lat_acc) * cos(lat_mo) * sin(dlon / 2) ** 2
    c = 2 * atan2(sqrt(a), sqrt(1 - a))

    distance = R * c

    #print("Result:", distance*1000)

    return distance*1000






def main():
    #combine()
    #read('/Users/Amelia/Desktop/CD.csv')
    #df1 = pd.read_csv('/Users/Amelia/Desktop/final.csv')
    #edit(df1)
    # df1 = pd.read_csv('/Users/Amelia/Desktop/MOBIKE.csv')
    # all_rfv = df1[['Departure_Station', 'Return_Station']]
    # all_rfv = all_rfv.reset_index(drop=True)
    # df2 = cat_to_dummy(all_rfv, 'auto', -9)
    # df2.to_csv('/Users/Amelia/Desktop/_muti.csv')
    mobike = pd.read_csv('/Users/Amelia/Desktop/bike_traffic_flow.csv')
    accidents = pd.read_csv('/Users/Amelia/Desktop/final_cycle_only_5_years.csv')
    map_dis(mobike,accidents)


if __name__ == '__main__':
    main()